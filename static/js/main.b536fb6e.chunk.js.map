{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","renderFile","fileObj","ExcelRenderer","err","resp","console","log","setState","dataLoaded","cols","rows","fileHandler","event","target","files","length","fileName","name","fileType","type","data","slice","lastIndexOf","uploadedFileName","isFormInvalid","openFileBrowser","fileInput","current","click","state","isOpen","bind","toggle","React","createRef","this","Jumbotron","className","Container","FormGroup","row","Label","for","xs","sm","lg","size","Col","InputGroup","InputGroupAddon","addonType","Button","color","style","zIndex","onClick","hidden","onChange","ref","value","padding","Input","readOnly","invalid","FormFeedback","Fade","in","tag","fontStyle","Card","body","outline","columns","tableClassName","tableHeaderRowClass","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b536fb6e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { OutTable, ExcelRenderer } from \"react-excel-renderer\";\r\nimport {\r\n  Jumbotron,\r\n  Col,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  FormGroup,\r\n  Label,\r\n  Button,\r\n  Fade,\r\n  FormFeedback,\r\n  Container,\r\n  Card,\r\n} from \"reactstrap\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n      dataLoaded: false,\r\n      isFormInvalid: false,\r\n      rows: null,\r\n      cols: null,\r\n      data: null,\r\n    };\r\n    this.fileHandler = this.fileHandler.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.openFileBrowser = this.openFileBrowser.bind(this);\r\n    this.renderFile = this.renderFile.bind(this);\r\n\r\n    this.fileInput = React.createRef();\r\n  }\r\n\r\n  renderFile = (fileObj) => {\r\n    //just pass the fileObj as parameter\r\n    ExcelRenderer(fileObj, (err, resp) => {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        this.setState({\r\n          dataLoaded: true,\r\n          cols: resp.cols,\r\n          rows: resp.rows,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  fileHandler = (event) => {\r\n    if (event.target.files.length) {\r\n      let fileObj = event.target.files[0];\r\n      let fileName = fileObj.name;\r\n      let fileType = fileObj.type;\r\n      this.setState({ data: fileObj });\r\n      console.log(\"FileType: \" + fileType);\r\n      console.log(\"FileName: \" + fileName);\r\n\r\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\r\n      if (\r\n        fileName.slice(fileName.lastIndexOf(\".\") + 1) === \"xlsx\" ||\r\n        fileName.slice(fileName.lastIndexOf(\".\") + 1) === \"xls\"\r\n      ) {\r\n        this.setState({\r\n          uploadedFileName: fileName,\r\n          isFormInvalid: false,\r\n        });\r\n        this.renderFile(fileObj);\r\n      } else {\r\n        this.setState({\r\n          isFormInvalid: true,\r\n          uploadedFileName: \"\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    });\r\n  }\r\n\r\n  openFileBrowser = () => {\r\n    this.fileInput.current.click();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Jumbotron className=\"jumbotron-background\">\r\n            <h1 className=\"display-3\">TradeCred File Uploader</h1>\r\n            <p className=\"lead\">Display the file on the UI</p>\r\n\r\n            <hr className=\"my-2\" />\r\n          </Jumbotron>\r\n        </div>\r\n        <Container>\r\n          <form>\r\n            <FormGroup row>\r\n              <Label for=\"exampleFile\" xs={6} sm={4} lg={2} size=\"lg\">\r\n                Upload\r\n              </Label>\r\n              <Col xs={4} sm={8} lg={10}>\r\n                <InputGroup>\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <Button\r\n                      color=\"info\"\r\n                      style={{ color: \"white\", zIndex: 0 }}\r\n                      onClick={this.openFileBrowser.bind(this)}\r\n                    >\r\n                      <i className=\"cui-file\"></i> Browse&hellip;\r\n                    </Button>\r\n                    <input\r\n                      type=\"file\"\r\n                      hidden\r\n                      onChange={this.fileHandler.bind(this)}\r\n                      ref={this.fileInput}\r\n                      onClick={(event) => {\r\n                        event.target.value = null;\r\n                      }}\r\n                      style={{ padding: \"10px\" }}\r\n                    />\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={this.state.uploadedFileName}\r\n                    readOnly\r\n                    invalid={this.state.isFormInvalid}\r\n                  />\r\n                  <FormFeedback>\r\n                    <Fade\r\n                      in={this.state.isFormInvalid}\r\n                      tag=\"h6\"\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    >\r\n                      Please select a .xlsx or xls file only !\r\n                    </Fade>\r\n                  </FormFeedback>\r\n                </InputGroup>\r\n              </Col>\r\n            </FormGroup>\r\n          </form>\r\n\r\n          {this.state.dataLoaded && (\r\n            <div>\r\n              <Card body outline color=\"secondary\" className=\"restrict-card\">\r\n                <OutTable\r\n                  data={this.state.rows}\r\n                  columns={this.state.cols}\r\n                  tableClassName=\"ExcelTable2007\"\r\n                  tableHeaderRowClass=\"heading\"\r\n                />\r\n                {console.log(this.state.rows)}\r\n                {console.log(this.state.cols)}\r\n                {/* {this.fileData()} */}\r\n                <div>\r\n                  <table>\r\n                    <tr>\r\n                      <th>\r\n                        <td>Parameters</td>\r\n                      </th>\r\n                      <th>\r\n                        <td>Values</td>\r\n                      </th>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total Invoices</td>\r\n                      <td>{this.state.rows.length - 1}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Invalid Invoice</td>\r\n                      <td>5</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total Valid Invoice</td>\r\n                      <td>9</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Distict Vendors</td>\r\n                      <td>2</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total Amount</td>\r\n                      <td>-2580</td>\r\n                    </tr>\r\n                  </table>\r\n                  {/* <p>File Name: {this.state.fileName}</p>\r\n                  <p>File Type: {this.state.fileType}</p> */}\r\n\r\n                  {/* <p>\r\n                      Last Modified:{\" \"}\r\n                      {this.state.fileObj.lastModifiedDate.toDateString()}\r\n                    </p> \r\n                  */}\r\n                </div>\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}