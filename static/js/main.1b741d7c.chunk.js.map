{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","renderFile","fileObj","ExcelRenderer","err","resp","console","log","setState","dataLoaded","cols","rows","fileHandler","event","target","files","length","fileName","name","fileType","type","slice","lastIndexOf","uploadedFileName","isFormInvalid","openFileBrowser","fileInput","current","click","fileData","state","lastModifiedDate","toDateString","isOpen","bind","toggle","React","createRef","this","Jumbotron","className","Container","FormGroup","row","Label","for","xs","sm","lg","size","Col","InputGroup","InputGroupAddon","addonType","Button","color","style","zIndex","onClick","hidden","onChange","ref","value","padding","Input","readOnly","invalid","FormFeedback","Fade","in","tag","fontStyle","Card","body","outline","data","columns","tableClassName","tableHeaderRowClass","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gXAsMeA,E,kDAnLb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,WAAa,SAACC,GAEZC,wBAAcD,GAAS,SAACE,EAAKC,GACvBD,EACFE,QAAQC,IAAIH,GAEZ,EAAKI,SAAS,CACZC,YAAY,EACZC,KAAML,EAAKK,KACXC,KAAMN,EAAKM,WA1BA,EAgCnBC,YAAc,SAACC,GACb,GAAIA,EAAMC,OAAOC,MAAMC,OAAQ,CAC7B,IAAId,EAAUW,EAAMC,OAAOC,MAAM,GAC7BE,EAAWf,EAAQgB,KACnBC,EAAWjB,EAAQkB,KAEvBd,QAAQC,IAAIY,GACZb,QAAQC,IAAIU,GAIwC,SAAlDA,EAASI,MAAMJ,EAASK,YAAY,KAAO,IACO,QAAlDL,EAASI,MAAMJ,EAASK,YAAY,KAAO,IAE3C,EAAKd,SAAS,CACZe,iBAAkBN,EAClBO,eAAe,IAEjB,EAAKvB,WAAWC,IAEhB,EAAKM,SAAS,CACZgB,eAAe,EACfD,iBAAkB,OAtDP,EAkEnBE,gBAAkB,WAChB,EAAKC,UAAUC,QAAQC,SAnEN,EAsEnBC,SAAW,WACT,OAAI,EAAKC,MAAM5B,QAEX,gCACE,+CACA,4CAAe,EAAK4B,MAAM5B,QAAQgB,QAClC,4CAAe,EAAKY,MAAM5B,QAAQkB,QAClC,gDACkB,EAAKU,MAAM5B,QAAQ6B,iBAAiBC,qBAMxD,gCACE,uBACA,8EApFN,EAAKF,MAAQ,CACXG,QAAQ,EACRxB,YAAY,EACZe,eAAe,EACfb,KAAM,KACND,KAAM,MAER,EAAKE,YAAc,EAAKA,YAAYsB,KAAjB,gBACnB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKT,gBAAkB,EAAKA,gBAAgBS,KAArB,gBACvB,EAAKjC,WAAa,EAAKA,WAAWiC,KAAhB,gBAElB,EAAKR,UAAYU,IAAMC,YAdN,E,qDA6DjBC,KAAK9B,SAAS,CACZyB,QAASK,KAAKR,MAAMG,W,+BA+BtB,OACE,gCACE,8BACE,eAACM,EAAA,EAAD,CAAWC,UAAU,uBAArB,UACE,oBAAIA,UAAU,YAAd,qCACA,mBAAGA,UAAU,OAAb,wCAEA,oBAAIA,UAAU,cAGlB,eAACC,EAAA,EAAD,WACE,+BACE,eAACC,EAAA,EAAD,CAAWC,KAAG,EAAd,UACE,cAACC,EAAA,EAAD,CAAOC,IAAI,cAAcC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,KAAK,KAAnD,oBAGA,cAACC,EAAA,EAAD,CAAKJ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAvB,SACE,eAACG,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,UACE,eAACC,EAAA,EAAD,CACEC,MAAM,OACNC,MAAO,CAAED,MAAO,QAASE,OAAQ,GACjCC,QAASpB,KAAKb,gBAAgBS,KAAKI,MAHrC,UAKE,mBAAGE,UAAU,aALf,mBAOA,uBACEpB,KAAK,OACLuC,QAAM,EACNC,SAAUtB,KAAK1B,YAAYsB,KAAKI,MAChCuB,IAAKvB,KAAKZ,UACVgC,QAAS,SAAC7C,GACRA,EAAMC,OAAOgD,MAAQ,MAEvBN,MAAO,CAAEO,QAAS,aAGtB,cAACC,EAAA,EAAD,CACE5C,KAAK,OACLoB,UAAU,eACVsB,MAAOxB,KAAKR,MAAMP,iBAClB0C,UAAQ,EACRC,QAAS5B,KAAKR,MAAMN,gBAEtB,cAAC2C,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,GAAI/B,KAAKR,MAAMN,cACf8C,IAAI,KACJd,MAAO,CAAEe,UAAW,UAHtB,kEAaTjC,KAAKR,MAAMrB,YACV,8BACE,cAAC+D,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACnB,MAAM,YAAYf,UAAU,gBAA/C,SACE,cAAC,WAAD,CACEmC,KAAMrC,KAAKR,MAAMnB,KACjBiE,QAAStC,KAAKR,MAAMpB,KACpBmE,eAAe,iBACfC,oBAAoB,mBAO9B,gCACE,+CACA,4CAAexC,KAAKR,MAAMb,YAC1B,4CAAeqB,KAAKR,MAAMX,sB,GAzKlB4D,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCPNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.1b741d7c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { OutTable, ExcelRenderer } from \"react-excel-renderer\";\nimport {\n  Jumbotron,\n  Col,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  FormGroup,\n  Label,\n  Button,\n  Fade,\n  FormFeedback,\n  Container,\n  Card,\n} from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      dataLoaded: false,\n      isFormInvalid: false,\n      rows: null,\n      cols: null,\n    };\n    this.fileHandler = this.fileHandler.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.openFileBrowser = this.openFileBrowser.bind(this);\n    this.renderFile = this.renderFile.bind(this);\n\n    this.fileInput = React.createRef();\n  }\n\n  renderFile = (fileObj) => {\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err);\n      } else {\n        this.setState({\n          dataLoaded: true,\n          cols: resp.cols,\n          rows: resp.rows,\n        });\n      }\n    });\n  };\n\n  fileHandler = (event) => {\n    if (event.target.files.length) {\n      let fileObj = event.target.files[0];\n      let fileName = fileObj.name;\n      let fileType = fileObj.type;\n\n      console.log(fileType);\n      console.log(fileName);\n\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\n      if (\n        fileName.slice(fileName.lastIndexOf(\".\") + 1) === \"xlsx\" ||\n        fileName.slice(fileName.lastIndexOf(\".\") + 1) === \"xls\"\n      ) {\n        this.setState({\n          uploadedFileName: fileName,\n          isFormInvalid: false,\n        });\n        this.renderFile(fileObj);\n      } else {\n        this.setState({\n          isFormInvalid: true,\n          uploadedFileName: \"\",\n        });\n      }\n    }\n  };\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  }\n\n  openFileBrowser = () => {\n    this.fileInput.current.click();\n  };\n\n  fileData = () => {\n    if (this.state.fileObj) {\n      return (\n        <div>\n          <h2>File Details:</h2>\n          <p>File Name: {this.state.fileObj.name}</p>\n          <p>File Type: {this.state.fileObj.type}</p>\n          <p>\n            Last Modified: {this.state.fileObj.lastModifiedDate.toDateString()}\n          </p>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h4>Choose before Pressing the Upload button</h4>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Jumbotron className=\"jumbotron-background\">\n            <h1 className=\"display-3\">TradeCred File Uploader</h1>\n            <p className=\"lead\">Display the file on the UI</p>\n\n            <hr className=\"my-2\" />\n          </Jumbotron>\n        </div>\n        <Container>\n          <form>\n            <FormGroup row>\n              <Label for=\"exampleFile\" xs={6} sm={4} lg={2} size=\"lg\">\n                Upload\n              </Label>\n              <Col xs={4} sm={8} lg={10}>\n                <InputGroup>\n                  <InputGroupAddon addonType=\"prepend\">\n                    <Button\n                      color=\"info\"\n                      style={{ color: \"white\", zIndex: 0 }}\n                      onClick={this.openFileBrowser.bind(this)}\n                    >\n                      <i className=\"cui-file\"></i> Browse&hellip;\n                    </Button>\n                    <input\n                      type=\"file\"\n                      hidden\n                      onChange={this.fileHandler.bind(this)}\n                      ref={this.fileInput}\n                      onClick={(event) => {\n                        event.target.value = null;\n                      }}\n                      style={{ padding: \"10px\" }}\n                    />\n                  </InputGroupAddon>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={this.state.uploadedFileName}\n                    readOnly\n                    invalid={this.state.isFormInvalid}\n                  />\n                  <FormFeedback>\n                    <Fade\n                      in={this.state.isFormInvalid}\n                      tag=\"h6\"\n                      style={{ fontStyle: \"italic\" }}\n                    >\n                      Please select a .xlsx or xls file only !\n                    </Fade>\n                  </FormFeedback>\n                </InputGroup>\n              </Col>\n            </FormGroup>\n          </form>\n\n          {this.state.dataLoaded && (\n            <div>\n              <Card body outline color=\"secondary\" className=\"restrict-card\">\n                <OutTable\n                  data={this.state.rows}\n                  columns={this.state.cols}\n                  tableClassName=\"ExcelTable2007\"\n                  tableHeaderRowClass=\"heading\"\n                />\n                {/* {this.fileData()} */}\n              </Card>\n            </div>\n          )}\n        </Container>\n        <div>\n          <h2>File Details:</h2>\n          <p>File Name: {this.state.fileName}</p>\n          <p>File Type: {this.state.fileType}</p>\n          {/* <p>\n              Last Modified:{\" \"}\n              {this.state.fileObj.lastModifiedDate.toDateString()}\n            </p> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}